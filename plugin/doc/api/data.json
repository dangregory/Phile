{
    "project": {},
    "files": {
        "src/Phile.js": {
            "name": "src/Phile.js",
            "modules": {},
            "classes": {
                "Phile": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Phile": {
            "name": "Phile",
            "shortname": "Phile",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Phile.js",
            "line": 135,
            "description": "The Phile class provides a javascript API to work with Pentaho files.\nThe optional options parameter sets standard options for this Phile instance.\n   Any global options present in Phile.options are applied if not present in options.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Object standard options"
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "src/Phile.js",
            "line": 162,
            "description": "These are the default options used for new Phile instances.\nThese can always be overriden by passing an options object to the constructor\nIt sets the following properties:\n<ul>\n  <li><code>requestTimeout</code> int: 30000 - number of milliseconds before a request to the Pentaho repository service will timeout </li>\n  <li><code>async</code> boolean: true - determines whether synchronous or asynchronous communication will be used.</li>\n  <li><code>webapp</code> String: \"/pentaho/api/repo/files/\" - The entry point for the file REST service. You might need to change this if you changed the default name of the pentaho web application.</li>\n</ul>",
            "itemtype": "property",
            "name": "defaultOptions",
            "static": 1,
            "type": "object",
            "class": "Phile"
        },
        {
            "file": "src/Phile.js",
            "line": 206,
            "description": "This is the core method to do a request to the Pentaho file service.\nNormally, you do not need to use this method directy, rather use a specific method like\n<code><a href=\"method_getChildren\">getChildren()</a></code>,\n<code><a href=\"method_getTree\">getTree()</a></code>,\n<code><a href=\"method_getContents\">getContents()</a></code>,\n<code><a href=\"method_getProperties\">getProperties()</a></code>,\nor <code><a href=\"method_save\">save()</a></code>.\n\nThe method takes one <code>conf</code> argument which represents the message to send to the service.\nThe <code>conf</code> argument supports the following generic properties:\n<dl>\n  <dt><code>success</code></dt>\n  <dd>A callback function to be called when the service responds successfully.\n    The callback is passed the following arguments: <dl>\n      <dt><code>options</code></dt>\n      <dd>The conf object that was passed to the request method, i.e., the request.</dd>\n      <dt><code>xhr</code></dt>\n      <dd>The XMLHttpRequest used for this request. Useful if you want to get response headers or process the raw response.</dd>\n      <dt><code>response</code></dt>\n      <dd>An object that represents the response. Its structure is (obviously) dependent upon the specific request.</dd>\n    </dl>\n  </dd>\n  <dt><code>failure</code></dt>\n  <dd>A callback function to be called when the service did not respond successfully.\n    The callback is passed the following arguments: <dl>\n      <dt><code>options</code></dt>\n      <dd>The conf object that was passed to the request method, i.e., the request.</dd>\n      <dt><code>xhr</code></dt>\n      <dd>The XMLHttpRequest used for this request. Useful if you want to get response headers or process the raw response.</dd>\n      <dt><code>exception</code></dt>\n      <dd>An object that represents the error</dd>\n    </dl>\n  </dd>\n  <dt><code>scope</code></dt>\n  <dd>The scope to use for the callbacks (defaults to null).</dd>\n  <dt><code>headers</code></dt>\n  <dd>An object to hold any HTTP request headers.</dd>\n  <dt><code>params</code></dt>\n  <dd>An object to hold any HTTP query parameters.</dd>\n</dl>",
            "itemtype": "method",
            "name": "request",
            "params": [
                {
                    "name": "conf",
                    "description": "An object representing the message.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "DOMDocument"
            },
            "class": "Phile"
        },
        {
            "file": "src/Phile.js",
            "line": 262,
            "description": "This method can be used to get the contents of a directory.\nThe method is passed a configuration object to specify callbacks and the path from where to get children from.\nThe configuration object supports all generic configuration properties as documented in the <code><a href=\"method_request\">request()</a></code> method.\nSpecific properties: <dl>\n  <dt><code>path</code></dt>\n  <dd>Specifies the folder for which to get the children. You can specify the as a string or an array of path components. If the path is specified as a string, you can separate path components either with a forward slash or with a semi-colon.</dd>\n</dl>\nThe response object passed back to the <code>success</code> callback has one property <code>repositoryFileDto</code>.\nThis is an array representing the list of children. Array items have the following properties: <dl>\n  <dt><code>aclNode</code></dt>\n  <dd>String <code>\"true\"</code> or <code>\"false\"</code> to flag if this is an ACL node or not.</dd>\n  <dt><code>createdDate</code></dt>\n  <dd>A string that can be parsed as an integer to get the timestamp indicating the date/time this node was created.</dd>\n  <dt><code>fileSize</code></dt>\n  <dd>A string that can be parsed as an integer to get the size (in bytes) of this node in case this node represents a file. If a filesize is not applicable for this node, it is <code>\"-1\"</code>.</dd>\n  <dt><code>folder</code></dt>\n  <dd>String <code>\"true\"</code> or <code>\"false\"</code> to flag if this is node represents a folder or not.</dd>\n  <dt><code>hidden</code></dt>\n  <dd>String <code>\"true\"</code> or <code>\"false\"</code> to flag if this is node is hidden for the end user or not.</dd>\n  <dt><code>id</code></dt>\n  <dd>A GUID identifiying this node.</dd>\n  <dt><code>locale</code></dt>\n  <dd>The current locale used for localized properties like <code>title</code>.</dd>\n  <dt><code>localeMapEntries</code></dt>\n  <dd>\n    This is an array of localized properties for this file. The array items have these properties:\n    <dl>\n      <dt><code>locale</code></dt>\n      <dd>\n        The name of the locale for this map of localized properties.\n        There is also a special <code>\"default\"</code> locale indicating the current locale.\n      </dd>\n      <dt>properties</dt>\n      <dd>\n        This is a bag of localized properties.\n        <dl>\n          <dt><code>key</code></dt>\n          <dl>The key for this property.</dl>\n          <dt><code>value</code></dt>\n          <dl>The value for this property.</dl>\n        </dl>\n      </dd>\n    </dl>\n  </dd>\n  <dt><code>locked</code></dt>\n  <dd>String <code>\"true\"</code> or <code>\"false\"</code> to flag if this is node is locked or not.</dd>\n  <dt><code>name</code></dt>\n  <dd>The name of this node.</dd>\n  <dt><code>ownerType</code></dt>\n  <dd>A string that can be parsed as an integer indicating the owner type.</dd>\n  <dt><code>path</code></dt>\n  <dd>A string containing the forward slash separated path components.</dd>\n  <dt><code>title</code></dt>\n  <dd>The title for presenting this node to the user.</dd>\n  <dt><code>versioned</code></dt>\n  <dd>String <code>\"true\"</code> or <code>\"false\"</code> to flag if this is node is versioned or not.</dd>\n</dl>",
            "itemtype": "method",
            "name": "getChildren",
            "params": [
                {
                    "name": "conf",
                    "description": "Object specifies where to get children from",
                    "type": "Object"
                }
            ],
            "class": "Phile"
        },
        {
            "file": "src/Phile.js",
            "line": 345,
            "description": "This method can be used to get the entire tree of files..",
            "class": "Phile"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nThis method can be used to get the entire tree of files..",
            "line": " src/Phile.js:345"
        }
    ]
}